{
  "asArray": {
    "group": "conversion-and-casting-functions",
    "name": "asArray",
    "description": "Returns array value if the value is array, otherwise, returns null.",
    "syntax": [
      "asArray(value)"
    ],
    "parameters": [
      {
        "name": "value",
        "type": [
          "array"
        ],
        "description": "",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "array"
    ],
    "longDescription": "Returns array value if the value is array, otherwise, returns null.",
    "aliases": [
      "asArray"
    ]
  },
  "asBinary": {
    "group": "conversion-and-casting-functions",
    "name": "asBinary",
    "description": "Returns binary value (byte array) if the value is binary, otherwise, returns null.",
    "syntax": [
      "asBinary(value)"
    ],
    "parameters": [
      {
        "name": "value",
        "type": [
          "binary"
        ],
        "description": "",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "binary"
    ],
    "longDescription": "Returns binary value (byte array) if the value is binary, otherwise, returns null.",
    "aliases": [
      "asBinary"
    ]
  },
  "asBoolean": {
    "group": "conversion-and-casting-functions",
    "name": "asBoolean",
    "description": "Returns boolean value if the value is boolean, otherwise, returns null.",
    "syntax": [
      "asBoolean(value)"
    ],
    "parameters": [
      {
        "name": "value",
        "type": [
          "boolean"
        ],
        "description": "",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "boolean"
    ],
    "longDescription": "Returns boolean value if the value is boolean, otherwise, returns null.",
    "aliases": [
      "asBoolean"
    ]
  },
  "asDouble": {
    "group": "conversion-and-casting-functions",
    "name": "asDouble",
    "description": "Returns double value if the value is double, otherwise, returns null.",
    "syntax": [
      "asDouble(value)"
    ],
    "parameters": [
      {
        "name": "value",
        "type": [
          "double"
        ],
        "description": "",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "double"
    ],
    "longDescription": "Returns double value if the value is double, otherwise, returns null.",
    "aliases": [
      "asDouble"
    ]
  },
  "asDuration": {
    "group": "conversion-and-casting-functions",
    "name": "asDuration",
    "description": "Returns duration value if the value is duration, otherwise, returns null.",
    "syntax": [
      "asDuration(value)"
    ],
    "parameters": [
      {
        "name": "value",
        "type": [
          "duration"
        ],
        "description": "",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "duration"
    ],
    "longDescription": "Returns duration value if the value is duration, otherwise, returns null.",
    "aliases": [
      "asDuration"
    ]
  },
  "asIp": {
    "group": "conversion-and-casting-functions",
    "name": "asIp",
    "description": "You can use this function to cast to an IP address.",
    "syntax": [
      "asIp(expression)"
    ],
    "parameters": [
      {
        "name": "expression",
        "type": [
          "string expression",
          "ip address"
        ],
        "description": "The expression to cast an expression to an IP address.",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "ip"
    ],
    "longDescription": "You can use this function to cast to an IP address.",
    "aliases": [
      "asIp"
    ]
  },
  "asLong": {
    "group": "conversion-and-casting-functions",
    "name": "asLong",
    "description": "Returns long value if the value is long, otherwise, null.",
    "syntax": [
      "asLong(value)"
    ],
    "parameters": [
      {
        "name": "value",
        "type": [
          "long"
        ],
        "description": "",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "long"
    ],
    "longDescription": "Returns long value if the value is long, otherwise null.",
    "aliases": [
      "asLong"
    ]
  },
  "asNumber": {
    "group": "conversion-and-casting-functions",
    "name": "asNumber",
    "description": "Returns same value if the value is integer, long, double, otherwise. returns null.",
    "syntax": [
      "asNumber(value)"
    ],
    "parameters": [
      {
        "name": "value",
        "type": [
          "double",
          "long"
        ],
        "description": "",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "double",
      "long"
    ],
    "longDescription": "Returns the same value if the value is integer, long, double, otherwise, returns null.",
    "aliases": [
      "asNumber"
    ]
  },
  "asRecord": {
    "group": "conversion-and-casting-functions",
    "name": "asRecord",
    "description": "Returns record value if the value is record, otherwise, returns null.",
    "syntax": [
      "asRecord(value)"
    ],
    "parameters": [
      {
        "name": "value",
        "type": [
          "record"
        ],
        "description": "",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "record"
    ],
    "longDescription": "Returns record value if the value is record, otherwise, returns null.",
    "aliases": [
      "asRecord"
    ]
  },
  "asString": {
    "group": "conversion-and-casting-functions",
    "name": "asString",
    "description": "Returns string value if the value is string, otherwise, returns null.",
    "syntax": [
      "asString(value)"
    ],
    "parameters": [
      {
        "name": "value",
        "type": [
          "string"
        ],
        "description": "",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "string"
    ],
    "longDescription": "Returns string value if the value is string, otherwise, returns null.",
    "aliases": [
      "asString"
    ]
  },
  "asTimeframe": {
    "group": "conversion-and-casting-functions",
    "name": "asTimeframe",
    "description": "Returns timeframe value if the value is timeframe, otherwise. returns null.",
    "syntax": [
      "asTimeframe(value)"
    ],
    "parameters": [
      {
        "name": "value",
        "type": [
          "timeframe"
        ],
        "description": "",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "timeframe"
    ],
    "longDescription": "Returns timeframe value if the value is timeframe, otherwise returns null.",
    "aliases": [
      "asTimeframe"
    ]
  },
  "asTimestamp": {
    "group": "conversion-and-casting-functions",
    "name": "asTimestamp",
    "description": "Returns timestamp value if the value is timestamp, otherwise, returns null.",
    "syntax": [
      "asTimestamp(value)"
    ],
    "parameters": [
      {
        "name": "value",
        "type": [
          "timestamp"
        ],
        "description": "",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "timestamp"
    ],
    "longDescription": "Returns timestamp value if the value is timestamp, otherwise, returns null.\nAlternatively use the toTimestamp function to convert a long, double or string value to a value of type timestamp.",
    "aliases": [
      "asTimestamp"
    ]
  },
  "asUid": {
    "group": "conversion-and-casting-functions",
    "name": "asUid",
    "description": "Returns a uid value if the value is a uid, otherwise, returns null.",
    "syntax": [
      "asUid(value)"
    ],
    "parameters": [
      {
        "name": "value",
        "type": [
          "uid"
        ],
        "description": "The value to cast.",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "uid"
    ],
    "longDescription": "Returns a uid value if the value is uid, otherwise returns null.",
    "aliases": [
      "asUid"
    ]
  },
  "decode": {
    "group": "conversion-and-casting-functions",
    "name": "decode",
    "description": "The decode functions allow decoding an encoded string representation into a plain string or binary data.",
    "syntax": [
      "decodeBase64ToBinary(expression)",
      "decodeBase64ToString(expression)",
      "decodeBase16ToBinary(expression)",
      "decodeBase16ToString(expression)"
    ],
    "parameters": [
      {
        "name": "expression",
        "type": [
          "string"
        ],
        "description": "An encoded string that needs to be decoded to a plain string or binary. Retrieves null if the encoding format does not match the outcome format.",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "binary",
      "string"
    ],
    "longDescription": "The decode function allows encoding binary data and strings into a string representation, and the opposite way. There are two types of decode functions, BASE64 and BASE16.",
    "aliases": [
      "decodeBase64ToBinary",
      "decodeBase64ToString",
      "decodeBase16ToBinary",
      "decodeBase16ToString"
    ]
  },
  "encode": {
    "group": "conversion-and-casting-functions",
    "name": "encode",
    "description": "The encode functions allow encoding binary data and plain strings into an encoded string representation.",
    "syntax": [
      "encodeBase64(expression)",
      "encodeBase16(expression)"
    ],
    "parameters": [
      {
        "name": "expression",
        "type": [
          "string",
          "binary"
        ],
        "description": "A string or binary expression to encode.",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "string"
    ],
    "longDescription": "The encode function allows encoding binary data and strings into a string representation, and the opposite way. There are two types of encode functions, BASE64 and BASE16.",
    "aliases": [
      "encodeBase16",
      "encodeBase64"
    ]
  },
  "getHighBits": {
    "group": "conversion-and-casting-functions",
    "name": "getHighBits",
    "description": "Extracts the most significant bits of a uid value or IP address.",
    "syntax": [
      "getHighBits(expression)"
    ],
    "parameters": [
      {
        "name": "expression",
        "type": [
          "uid",
          "ip address"
        ],
        "description": "The expression from which the most significant bits should be extracted.",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "long"
    ],
    "longDescription": "Extracts the most significant bits of an expression. It accepts uid or ip expression types. For all other types, it returns null.",
    "aliases": [
      "getHighBits"
    ]
  },
  "getLowBits": {
    "group": "conversion-and-casting-functions",
    "name": "getLowBits",
    "description": "Extracts the least significant bits of a uid value or IP address.",
    "syntax": [
      "getLowBits(expression)"
    ],
    "parameters": [
      {
        "name": "expression",
        "type": [
          "uid",
          "ip address"
        ],
        "description": "The expression from which to extract the least significant bits.",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "long"
    ],
    "longDescription": "Extracts the least significant bits of an expression. It accepts uid or ip expression types. For all other types, it returns null.",
    "aliases": [
      "getLowBits"
    ]
  },
  "hexStringToNumber": {
    "group": "conversion-and-casting-functions",
    "name": "hexStringToNumber",
    "description": "Converts a hexadecimal string to a number.",
    "syntax": [
      "hexStringToNumber(expression)"
    ],
    "parameters": [
      {
        "name": "expression",
        "type": [
          "string expression"
        ],
        "description": "The string expression that will be converted to a number.",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "double",
      "long"
    ],
    "longDescription": "Converts a hexadecimal string to a number.",
    "aliases": [
      "hexStringToNumber"
    ]
  },
  "isUid128": {
    "group": "conversion-and-casting-functions",
    "name": "isUid128",
    "description": "Tests if a uid value is of subtype uid128.",
    "syntax": [
      "isUid128(expression)"
    ],
    "parameters": [
      {
        "name": "expression",
        "type": [
          "uid"
        ],
        "description": "The uid expression that will be checked if it is of subtype uid128.",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "boolean"
    ],
    "longDescription": "Tests if a uid value is of subtype uid128.",
    "aliases": [
      "isUid128"
    ]
  },
  "isUid64": {
    "group": "conversion-and-casting-functions",
    "name": "isUid64",
    "description": "Tests if a uid value is of subtype uid64.",
    "syntax": [
      "isUid64(expression)"
    ],
    "parameters": [
      {
        "name": "expression",
        "type": [
          "uid"
        ],
        "description": "The uid expression that will be checked if it is of subtype uid64.",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "boolean"
    ],
    "longDescription": "Tests if a uid value is of subtype uid64.",
    "aliases": [
      "isUid64"
    ]
  },
  "isUuid": {
    "group": "conversion-and-casting-functions",
    "name": "isUuid",
    "description": "Tests if a uid value is of subtype uuid.",
    "syntax": [
      "isUuid(expression)"
    ],
    "parameters": [
      {
        "name": "expression",
        "type": [
          "uid"
        ],
        "description": "The uid expression that will be checked if it is of subtype uuid.",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "boolean"
    ],
    "longDescription": "Tests if a uid value is of subtype uuid.",
    "aliases": [
      "isUuid"
    ]
  },
  "numberToHexString": {
    "group": "conversion-and-casting-functions",
    "name": "numberToHexString",
    "description": "Converts a number to a hexadecimal string.",
    "syntax": [
      "numberToHexString(expression)"
    ],
    "parameters": [
      {
        "name": "expression",
        "type": [
          "numeric expression"
        ],
        "description": "The numeric expression that will be converted to a hexadecimal string.",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "string"
    ],
    "longDescription": "Converts a number to a hexadecimal string.",
    "aliases": [
      "numberToHexString"
    ]
  },
  "toArray": {
    "group": "conversion-and-casting-functions",
    "name": "toArray",
    "description": "Returns the value if it is an array.",
    "syntax": [
      "toArray(value)"
    ],
    "parameters": [
      {
        "name": "value",
        "type": [
          "array",
          "boolean",
          "double",
          "duration",
          "ip",
          "long",
          "record",
          "string",
          "timeframe",
          "timestamp"
        ],
        "description": "",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "array"
    ],
    "longDescription": "Returns the value if it is an array. Otherwise, converts a value to the single element array holding that value.",
    "aliases": [
      "toArray"
    ]
  },
  "toBoolean": {
    "group": "conversion-and-casting-functions",
    "name": "toBoolean",
    "description": "Converts a value to Boolean if the value is of a suitable type.",
    "syntax": [
      "toBoolean(value)"
    ],
    "parameters": [
      {
        "name": "value",
        "type": [
          "boolean",
          "double",
          "long",
          "string",
          "array"
        ],
        "description": "",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "boolean"
    ],
    "longDescription": "Converts string values true or TRUE to a Boolean true.The comparison is case insensitive. Converts other values to Boolean false. Converts numeric value 0 to Boolean false. Converts other numeric values to Boolean true.",
    "aliases": [
      "toBoolean"
    ]
  },
  "toDouble": {
    "group": "conversion-and-casting-functions",
    "name": "toDouble",
    "description": "Converts a value to double if the value is of a suitable type.",
    "syntax": [
      "toDouble(value)"
    ],
    "parameters": [
      {
        "name": "value",
        "type": [
          "double",
          "long",
          "string",
          "boolean",
          "ip",
          "timestamp",
          "duration",
          "array"
        ],
        "description": "",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "double"
    ],
    "longDescription": "Use asDouble(value) function to return if the value is double or variant<double>, otherwise null.",
    "aliases": [
      "toDouble"
    ]
  },
  "toDuration": {
    "group": "conversion-and-casting-functions",
    "name": "toDuration",
    "description": "Converts a value to duration if the value is of a suitable type.",
    "syntax": [
      "toDuration(value)"
    ],
    "parameters": [
      {
        "name": "value",
        "type": [
          "duration",
          "double",
          "long",
          "string",
          "timeframe",
          "array"
        ],
        "description": "",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "duration"
    ],
    "longDescription": "Converts a value to duration if the value is of a suitable type. If the argument is an array, the element at position 0 is converted.",
    "aliases": [
      "toDuration"
    ]
  },
  "toIp": {
    "group": "conversion-and-casting-functions",
    "name": "toIp",
    "description": "You can use this function to convert an expression to an IP address.",
    "syntax": [
      "toIp(expression)"
    ],
    "parameters": [
      {
        "name": "expression",
        "type": [
          "string expression",
          "ip address"
        ],
        "description": "The expression to convert an expression to an IP address.",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "ip"
    ],
    "longDescription": "You can use this function to convert an expression to an IP address.",
    "aliases": [
      "toIp"
    ]
  },
  "toLong": {
    "group": "conversion-and-casting-functions",
    "name": "toLong",
    "description": "Converts a value to long if the value is of a suitable type.",
    "syntax": [
      "toLong(value)"
    ],
    "parameters": [
      {
        "name": "value",
        "type": [
          "long",
          "double",
          "string",
          "boolean",
          "ip",
          "timestamp",
          "duration",
          "array"
        ],
        "description": "",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "long"
    ],
    "longDescription": "Converts a value to long if the value is of a suitable type. If the argument is an array, the element at position 0 is converted.",
    "aliases": [
      "toLong"
    ]
  },
  "toString": {
    "group": "conversion-and-casting-functions",
    "name": "toString",
    "description": "Returns the string representation of a value.",
    "syntax": [
      "toString(value)"
    ],
    "parameters": [
      {
        "name": "value",
        "type": [
          "double",
          "boolean",
          "timestamp",
          "timeframe",
          "duration",
          "ip",
          "array",
          "record"
        ],
        "description": "Parameter that should be transformed into text form.",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "string"
    ],
    "longDescription": "Returns the string representation of a value.",
    "aliases": [
      "toString"
    ]
  },
  "toTimeframe": {
    "group": "conversion-and-casting-functions",
    "name": "toTimeframe",
    "description": "Converts a value to timeframe if the value is of a suitable type.",
    "syntax": [
      "toTimeframe(value)"
    ],
    "parameters": [
      {
        "name": "value",
        "type": [
          "timeframe",
          "string",
          "array"
        ],
        "description": "",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "timeframe"
    ],
    "longDescription": "Converts a value to timeframe if the value is of a suitable type. If the argument is an array, the element at position 0 is converted.",
    "aliases": [
      "toTimeframe"
    ]
  },
  "toTimestamp": {
    "group": "conversion-and-casting-functions",
    "name": "toTimestamp",
    "description": "Converts a value to timestamp if the value is of a suitable type.",
    "syntax": [
      "toTimestamp(value)"
    ],
    "parameters": [
      {
        "name": "value",
        "type": [
          "timestamp",
          "double",
          "long",
          "string",
          "array"
        ],
        "description": "",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "timestamp"
    ],
    "longDescription": "Use asTimestamp(<value>) function to return if the value is timestamp or variant<timestamp>, otherwise null.",
    "aliases": [
      "toTimestamp"
    ]
  },
  "toUid": {
    "group": "conversion-and-casting-functions",
    "name": "toUid",
    "description": "Converts a value to uid if the value is of a suitable type.",
    "syntax": [
      "toUid(value)"
    ],
    "parameters": [
      {
        "name": "value",
        "type": [
          "number",
          "string",
          "uid",
          "array"
        ],
        "description": "Any convertible value. If the argument is an array, the element at position 0 is converted.",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "uid"
    ],
    "longDescription": "Converts a value to uid if the value is of a suitable type.",
    "aliases": [
      "toUid"
    ]
  },
  "type": {
    "group": "conversion-and-casting-functions",
    "name": "type",
    "description": "Returns the type of value as a string.",
    "syntax": [
      "type(expression [, withSubtype])"
    ],
    "parameters": [
      {
        "name": "expression",
        "type": [
          "array",
          "boolean",
          "double",
          "duration",
          "ip",
          "long",
          "record",
          "string",
          "timeframe",
          "timestamp"
        ],
        "description": "",
        "required": true,
        "repetitive": false
      },
      {
        "name": "withSubtype",
        "type": [
          "boolean"
        ],
        "description": "Whether the subtype information should be included.",
        "required": false,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "string"
    ],
    "longDescription": "Returns the type of a value as a string.",
    "aliases": [
      "type"
    ]
  },
  "uid128": {
    "group": "conversion-and-casting-functions",
    "name": "uid128",
    "description": "Creates a uid of subtype uid128 from two long expressions.",
    "syntax": [
      "uid128(mostSignificantBits, leastSignificantBits)"
    ],
    "parameters": [
      {
        "name": "mostSignificantBits",
        "type": [
          "long"
        ],
        "description": "The first long expression for the most significant bits of a uid128.",
        "required": true,
        "repetitive": false
      },
      {
        "name": "leastSignificantBits",
        "type": [
          "long"
        ],
        "description": "The second long expression for the least significant bits of a uid128.",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "uid"
    ],
    "longDescription": "Creates a uid of subtype uid128 from two long expressions.",
    "aliases": [
      "uid128"
    ]
  },
  "uid64": {
    "group": "conversion-and-casting-functions",
    "name": "uid64",
    "description": "Creates a uid of subtype uid64 from a long expression.",
    "syntax": [
      "uid64(expression)"
    ],
    "parameters": [
      {
        "name": "expression",
        "type": [
          "long"
        ],
        "description": "The long expression for a uid64.",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "uid"
    ],
    "longDescription": "Creates a uid of subtype uid64 from a long expression.",
    "aliases": [
      "uid64"
    ]
  },
  "uuid": {
    "group": "conversion-and-casting-functions",
    "name": "uuid",
    "description": "Creates a uid of subtype uuid from two long expressions.",
    "syntax": [
      "uuid(mostSignificantBits, leastSignificantBits)"
    ],
    "parameters": [
      {
        "name": "mostSignificantBits",
        "type": [
          "long"
        ],
        "description": "The first long expression for the most significant bits of a uuid.",
        "required": true,
        "repetitive": false
      },
      {
        "name": "leastSignificantBits",
        "type": [
          "long"
        ],
        "description": "The second long expression for the least significant bits of a uuid.",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "uid"
    ],
    "longDescription": "Creates a uid of subtype uuid from two long expressions.",
    "aliases": [
      "uuid"
    ]
  }
}