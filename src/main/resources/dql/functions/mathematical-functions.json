{
  "abs": {
    "group": "mathematical-functions",
    "name": "abs",
    "description": "Returns the absolute value of numeric_expression.",
    "syntax": [
      "abs(expression)"
    ],
    "parameters": [
      {
        "name": "expression",
        "type": [
          "double",
          "long",
          "duration"
        ],
        "description": "The numeric expression for which to calculate the absolute value.",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "double",
      "long",
      "duration"
    ],
    "longDescription": "Returns the absolute value of numeric_expression. Returns NULL if numeric_expression evaluates to NULL.",
    "aliases": [
      "abs"
    ]
  },
  "acos": {
    "group": "mathematical-functions",
    "name": "acos",
    "description": "Computes arc cosine of expression.",
    "syntax": [
      "acos(expression)"
    ],
    "parameters": [
      {
        "name": "expression",
        "type": [
          "double",
          "long"
        ],
        "description": "The numeric expression, angle in radians for which to calculate the acos.",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "double"
    ],
    "longDescription": "Computes arc cosine of expression. The returned angle is in the range 0.0 through pi. Returns null if expression evaluates to NULL.",
    "aliases": [
      "acos"
    ]
  },
  "asin": {
    "group": "mathematical-functions",
    "name": "asin",
    "description": "Computes arc sine of expression.",
    "syntax": [
      "asin(expression)"
    ],
    "parameters": [
      {
        "name": "expression",
        "type": [
          "double",
          "long"
        ],
        "description": "The numeric expression, angle in radians for which to calculate the asin.",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "double"
    ],
    "longDescription": "Computes arc sine of expression. The returned angle is in the range -pi/2 through pi/2. Returns null if <expression> evaluates to NULL.",
    "aliases": [
      "asin"
    ]
  },
  "atan": {
    "group": "mathematical-functions",
    "name": "atan",
    "description": "Computes the arc tangent of expression.",
    "syntax": [
      "atan(expression)"
    ],
    "parameters": [
      {
        "name": "expression",
        "type": [
          "double",
          "long"
        ],
        "description": "The numeric expression, angle in radians for which to calculate the atan.",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "double"
    ],
    "longDescription": "Computes the arc tangent of expression. The returned angle is in the range -p/2 through pi/2. Returns null if expression evaluates to NULL.",
    "aliases": [
      "atan"
    ]
  },
  "atan2": {
    "group": "mathematical-functions",
    "name": "atan2",
    "description": "Computes the angle theta from the conversion of rectangular coordinates (x, y) to polar coordinates (r, theta).",
    "syntax": [
      "atan2(ordinate, abscissa)"
    ],
    "parameters": [
      {
        "name": "ordinate",
        "type": [
          "double",
          "long"
        ],
        "description": "The ordinate coordinate.",
        "required": true,
        "repetitive": false
      },
      {
        "name": "abscissa",
        "type": [
          "double",
          "long"
        ],
        "description": "The abscissa coordinate.",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "double"
    ],
    "longDescription": "Computes the angle theta from the conversion of rectangular coordinates (x, y) to polar coordinates (r, theta). Returns null if either of the expressions evaluates to NULL.",
    "aliases": [
      "atan2"
    ]
  },
  "bin": {
    "group": "mathematical-functions",
    "name": "bin",
    "description": "Rounds values down to a multiple of a given numeric bin size.",
    "syntax": [
      "bin(expression, interval)"
    ],
    "parameters": [
      {
        "name": "expression",
        "type": [
          "timestamp",
          "long",
          "double",
          "duration"
        ],
        "description": "The expression that should be aligned.",
        "required": true,
        "repetitive": false
      },
      {
        "name": "interval",
        "type": [
          "duration",
          "double",
          "long"
        ],
        "description": "The interval by which to align the expression. Constraints: statically evaluated.",
        "required": true,
        "repetitive": false
      },
      {
        "name": "at",
        "type": [
          "timestamp",
          "number",
          "duration"
        ],
        "description": "The offset to which each interval should be shifted. Default: 0. Constraints: The offset to which each interval should be shifted.",
        "required": false,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "double",
      "long",
      "duration",
      "timestamp"
    ],
    "longDescription": "Used frequently in combination with summarize , by: ..... If it encounters a scattered set of values, they will be grouped into a smaller set of specific values.",
    "aliases": [
      "bin"
    ]
  },
  "ceil": {
    "group": "mathematical-functions",
    "name": "ceil",
    "description": "Calculates the smallest (closest to negative infinity) double value greater than or equal to the numeric_expression; is equal to a mathematical integer.",
    "syntax": [
      "ceil(expression)"
    ],
    "parameters": [
      {
        "name": "expression",
        "type": [
          "double",
          "long"
        ],
        "description": "The numeric expression to be rounded up.",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "double",
      "long"
    ],
    "longDescription": "Calculates the smallest (closest to negative infinity) double value greater than or equal to the numeric_expression; is equal to a mathematical integer. Returns null if numeric_expression evaluates to NULL. The return type is of the same type as the input parameter.",
    "aliases": [
      "ceil"
    ]
  },
  "cos": {
    "group": "mathematical-functions",
    "name": "cos",
    "description": "Computes the trigonometric cosine of an angle expression (in radians).",
    "syntax": [
      "cos(expression)"
    ],
    "parameters": [
      {
        "name": "expression",
        "type": [
          "double",
          "long"
        ],
        "description": "The numeric expression, angle in radians for which to calculate the sin.",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "double"
    ],
    "longDescription": "Computes the trigonometric cosine of an angle expression (in radians). Returns null if expression evaluates to NULL.",
    "aliases": [
      "cos"
    ]
  },
  "cosh": {
    "group": "mathematical-functions",
    "name": "cosh",
    "description": "Computes the hyperbolic cosine of an angle expression.",
    "syntax": [
      "cosh(expression)"
    ],
    "parameters": [
      {
        "name": "expression",
        "type": [
          "double",
          "long"
        ],
        "description": "The numeric expression, angle in radians for which to calculate the cosh.",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "double"
    ],
    "longDescription": "Computes the hyperbolic cosine of an angle <expression>. Returns null if <expression> evaluates to NULL.",
    "aliases": [
      "cosh"
    ]
  },
  "cbrt": {
    "group": "mathematical-functions",
    "name": "cbrt",
    "description": "Calculates the real cubic root of a numeric expression.",
    "syntax": [
      "cbrt (numeric_expression)"
    ],
    "parameters": [
      {
        "name": "expression",
        "type": [
          "double",
          "long"
        ],
        "description": "The numeric expression for which to calculate the real cubic root.",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "double"
    ],
    "longDescription": "Calculates the real cubic root of a numeric expression.",
    "aliases": [
      "cbrt "
    ]
  },
  "degreeToRadian": {
    "group": "mathematical-functions",
    "name": "degreeToRadian",
    "description": "Converts the numeric expression of an angle in degrees to an approximately equivalent angle as expressed in radians.",
    "syntax": [
      "degreeToRadian(expression)"
    ],
    "parameters": [
      {
        "name": "expression",
        "type": [
          "double",
          "long"
        ],
        "description": "The angle to be converted from radians to degrees.",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "double"
    ],
    "longDescription": "Converts the numeric expression of an angle in degrees to an approximately equivalent angle as expressed in radians. Returns null if numeric_expr evaluates to NULL.",
    "aliases": [
      "degreeToRadian"
    ]
  },
  "e": {
    "group": "mathematical-functions",
    "name": "e",
    "description": "Returns Euler’s number.",
    "syntax": [
      "e()"
    ],
    "parameters": [],
    "examples": [],
    "returns": [
      "double"
    ],
    "longDescription": "Returns Euler’s number.",
    "aliases": [
      "e"
    ]
  },
  "exp": {
    "group": "mathematical-functions",
    "name": "exp",
    "description": "Calculates the exponential function e^x, where e is the Euler's number and x is a numeric expression.",
    "syntax": [
      "exp(expression)"
    ],
    "parameters": [
      {
        "name": "expression",
        "type": [
          "double",
          "duration",
          "long"
        ],
        "description": "The numeric expression for which to calculate the exponential function.",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "double"
    ],
    "longDescription": "Calculates the exponential function e^x, where e is the Euler's number and x is a numeric expression.",
    "aliases": [
      "exp"
    ]
  },
  "floor": {
    "group": "mathematical-functions",
    "name": "floor",
    "description": "Calculates the largest (closest to positive infinity) double value less than or equal to the numeric_expression; and is equal to a mathematical integer.",
    "syntax": [
      "floor(expression)"
    ],
    "parameters": [
      {
        "name": "expression",
        "type": [
          "double",
          "long"
        ],
        "description": "The numeric expression to be rounded down.",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "double",
      "long"
    ],
    "longDescription": "Calculates the largest (closest to positive infinity) double value less than or equal to the numeric_expression; and is equal to a mathematical integer. Returns NULL if numeric_expression evaluates to NULL. The return type is of the same type as the input parameter.",
    "aliases": [
      "floor"
    ]
  },
  "hypotenuse": {
    "group": "mathematical-functions",
    "name": "hypotenuse",
    "description": "Returns sqrt (x^2 + y^2).",
    "syntax": [
      "hypotenuse(x, y)"
    ],
    "parameters": [
      {
        "name": "x",
        "type": [
          "double",
          "long"
        ],
        "description": "Length of the first of the catheti.",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "double"
    ],
    "longDescription": "Returns sqrt(x^2 + y^2). Returns null if expression evaluates to NULL.",
    "aliases": [
      "hypotenuse"
    ]
  },
  "log": {
    "group": "mathematical-functions",
    "name": "log",
    "description": "Calculates the natural logarithm (the base is e, the Euler's number) of a numeric expression.",
    "syntax": [
      "log(expression)"
    ],
    "parameters": [
      {
        "name": "expression",
        "type": [
          "double",
          "long"
        ],
        "description": "The numeric expression for which to calculate the natural logarithm (base e).",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "double"
    ],
    "longDescription": "Calculates the natural logarithm (the base is e, the Euler's number) of a numeric expression.",
    "aliases": [
      "log"
    ]
  },
  "log1p": {
    "group": "mathematical-functions",
    "name": "log1p",
    "description": "Calculates log(1+x), where log is the natural logarithm and x is a numeric expression.",
    "syntax": [
      "log1p(expression)"
    ],
    "parameters": [
      {
        "name": "expression",
        "type": [
          "double",
          "long"
        ],
        "description": "The numeric expression for which to add one and calculate the natural logarithm (base e).",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "double"
    ],
    "longDescription": "Calculates log(1+x), where log is the natural logarithm and x is a numeric expression.",
    "aliases": [
      "log1p"
    ]
  },
  "log10": {
    "group": "mathematical-functions",
    "name": "log10",
    "description": "Calculates the decadic (common) logarithm (the base is 10) of a numeric expression.",
    "syntax": [
      "log10(expression)"
    ],
    "parameters": [
      {
        "name": "expression",
        "type": [
          "double",
          "long"
        ],
        "description": "The numeric expression for which to calculate the decadic logarithm (base 10).",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "double"
    ],
    "longDescription": "Calculates the decadic (common) logarithm (the base is 10) of a numeric expression.",
    "aliases": [
      "log10"
    ]
  },
  "pi": {
    "group": "mathematical-functions",
    "name": "pi",
    "description": "Returns the constant value of PI (Archimedes’ number).",
    "syntax": [
      "pi()"
    ],
    "parameters": [],
    "examples": [],
    "returns": [
      "double"
    ],
    "longDescription": "Returns the constant value of PI (Archimedes’ number).",
    "aliases": [
      "pi"
    ]
  },
  "power": {
    "group": "mathematical-functions",
    "name": "power",
    "description": "Raises a numeric expression to a given power.",
    "syntax": [
      "power(base, exponent)"
    ],
    "parameters": [
      {
        "name": "base",
        "type": [
          "double",
          "long"
        ],
        "description": "The numeric expression acting as the base of the power calculation.",
        "required": true,
        "repetitive": false
      },
      {
        "name": "exponent",
        "type": [
          "double",
          "long"
        ],
        "description": "The numeric expression acting as the exponent of the power calculation.",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "double"
    ],
    "longDescription": "Raises a numeric expression to a given power.",
    "aliases": [
      "power"
    ]
  },
  "radianToDegree": {
    "group": "mathematical-functions",
    "name": "radianToDegree",
    "description": "Converts the numeric expression of an angle in radians to an approximately equivalent angle as expressed in degrees.",
    "syntax": [
      "radianToDegree(numeric_expr)"
    ],
    "parameters": [
      {
        "name": "expression",
        "type": [
          "double",
          "long"
        ],
        "description": "The angle to be converted from radians to degrees.",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "double"
    ],
    "longDescription": "Converts the numeric expression of an angle in radians to an approximately equivalent angle as expressed in degrees. Returns null if numeric_expr evaluates to NULL.",
    "aliases": [
      "radianToDegree"
    ]
  },
  "random": {
    "group": "mathematical-functions",
    "name": "random",
    "description": "Creates a random double value.",
    "syntax": [
      "random()"
    ],
    "parameters": [],
    "examples": [],
    "returns": [
      "double"
    ],
    "longDescription": "Creates a random double value. Generated values aren't deterministic. The value range of the generated double value is between 0.0 (inclusive) and 1.0 (exclusive).",
    "aliases": [
      "random"
    ]
  },
  "range": {
    "group": "mathematical-functions",
    "name": "range",
    "description": "Aligns the given value/timestamp to value range based on the provided alignment parameter.",
    "syntax": [
      "range(expression, interval [, at])"
    ],
    "parameters": [
      {
        "name": "expressions",
        "type": [
          "expressions"
        ],
        "description": "The numeric, timestamp or duration expression that should be aligned into bins.",
        "required": true,
        "repetitive": false
      },
      {
        "name": "interval",
        "type": [
          "expression"
        ],
        "description": "The size of bins produced and the values that are aligned to it. Constraints: numeric_expression, duration_expression.",
        "required": true,
        "repetitive": false
      },
      {
        "name": "at",
        "type": [
          "expression"
        ],
        "description": "The starting value for the first bin that is produced. Default: 0, EPOCH.",
        "required": false,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "record"
    ],
    "longDescription": "Aligns the given value/timestamp to value range based on the provided alignment parameter. The range function is similar to the bin function, but produces a range instead, then provides information about the start and the end of the bin the value is aligned to.",
    "aliases": [
      "range"
    ]
  },
  "round": {
    "group": "mathematical-functions",
    "name": "round",
    "description": "Rounds any numeric value to the specified number of decimal places.",
    "syntax": [
      "round(expression [, decimals])"
    ],
    "parameters": [
      {
        "name": "expression",
        "type": [
          "double",
          "long"
        ],
        "description": "Numeric expression to be rounded.",
        "required": true,
        "repetitive": false
      },
      {
        "name": "decimals",
        "type": [
          "long"
        ],
        "description": "Number of places after the decimal point.",
        "required": false,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "double",
      "long"
    ],
    "longDescription": "Rounds any numeric value to the specified number of decimal places. If you don't specify the number of decimal places, it rounds to the nearest integer.\nThe return type is of the same type as the input parameter.",
    "aliases": [
      "round"
    ]
  },
  "signum": {
    "group": "mathematical-functions",
    "name": "signum",
    "description": "Returns the signum (sign) result of an argument.",
    "syntax": [
      "signum(expression)"
    ],
    "parameters": [
      {
        "name": "expression",
        "type": [
          "double",
          "long"
        ],
        "description": "The numeric expression for which to calculate the signum.",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "double",
      "long"
    ],
    "longDescription": "Returns the signum (sign) result of an argument. It returns one of four possible values: -1 (if numeric_expression evaluates to a value less than 0), 0 (if numeric_expression evaluates to 0), 1 (if numeric_expression evaluates to a value greater than 0), or null (if numeric_expression evaluates to NULL).\nThe return type is of the same type as the input parameter.",
    "aliases": [
      "signum"
    ]
  },
  "sin": {
    "group": "mathematical-functions",
    "name": "sin",
    "description": "Computes the trigonometric sine of angle expression (in radians).",
    "syntax": [
      "sin(expression)"
    ],
    "parameters": [
      {
        "name": "expression",
        "type": [
          "double",
          "long"
        ],
        "description": "The numeric expression, angle in radians for which to calculate the sin.",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "double"
    ],
    "longDescription": "Computes the trigonometric sine of angle <expression> (in radians). Returns null if <expression> evaluates to NULL.",
    "aliases": [
      "sin"
    ]
  },
  "sinh": {
    "group": "mathematical-functions",
    "name": "sinh",
    "description": "Computes the hyperbolic sine of expression.",
    "syntax": [
      "sinh(expression)"
    ],
    "parameters": [
      {
        "name": "expression",
        "type": [
          "double",
          "long"
        ],
        "description": "The numeric expression, angle in radians for which to calculate the sinh.",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "double"
    ],
    "longDescription": "Computes the hyperbolic sine of <expression>. Returns null if <expression> evaluates to NULL.",
    "aliases": [
      "sinh"
    ]
  },
  "sqrt": {
    "group": "mathematical-functions",
    "name": "sqrt",
    "description": "Computes the positive square root of a numeric expression.",
    "syntax": [
      "sqrt(expression)"
    ],
    "parameters": [
      {
        "name": "expression",
        "type": [
          "double",
          "long"
        ],
        "description": "The numeric expression for which to calculate the square root.",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "double"
    ],
    "longDescription": "Computes the positive square root of a numeric expression.",
    "aliases": [
      "sqrt"
    ]
  },
  "tan": {
    "group": "mathematical-functions",
    "name": "tan",
    "description": "Computes the trigonometric tangent of angle expression (in radians).",
    "syntax": [
      "tan(expression)"
    ],
    "parameters": [
      {
        "name": "expression",
        "type": [
          "double",
          "long"
        ],
        "description": "The numeric expression, angle in radians for which to calculate the tan.",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "double"
    ],
    "longDescription": "Computes the trigonometric tangent of angle expression (in radians). Returns null if expression evaluates to NULL.",
    "aliases": [
      "tan"
    ]
  },
  "tanh": {
    "group": "mathematical-functions",
    "name": "tanh",
    "description": "Computes the hyperbolic tangent of expression.",
    "syntax": [
      "tanh(expression)"
    ],
    "parameters": [
      {
        "name": "expression",
        "type": [
          "double",
          "long"
        ],
        "description": "The numeric expression, angle in radians for which to calculate the tanh.",
        "required": true,
        "repetitive": false
      }
    ],
    "examples": [],
    "returns": [
      "double"
    ],
    "longDescription": "Computes the hyperbolic tangent of expression. Returns null if expression evaluates to NULL.",
    "aliases": [
      "tanh"
    ]
  }
}